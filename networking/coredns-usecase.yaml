apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-02T13:20:17Z"
    labels:
      name: hr
    name: hr
    namespace: default
    resourceVersion: "568"
    uid: 4b8291d7-332b-4cdf-a04a-7af92ec02ef7
  spec:
    containers:
    - args:
      - -c
      - while true; do echo -e "HTTP/1.1 200 OK\n\n This is the HR server!" | nc -l
        -p 80 -q 1; done
      command:
      - /bin/sh
      image: nicolaka/netshoot:v0.11
      imagePullPolicy: IfNotPresent
      name: web
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2vw9b
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: hr-host1
    nodeName: controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-2vw9b
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:29Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:29Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:29Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:17Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c6c2b378943d702cf0ee9cbf41b56f5246852b01a3242ff9f291df4c3e122df1
      image: docker.io/nicolaka/netshoot:v0.11
      imageID: docker.io/nicolaka/netshoot@sha256:a7c92e1a2fb9287576a16e107166fee7f9925e15d2c1a683dbb1f4370ba9bfe8
      lastState: {}
      name: web
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-02T13:20:29Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2vw9b
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.122.157
    hostIPs:
    - ip: 192.168.122.157
    phase: Running
    podIP: 172.17.0.5
    podIPs:
    - ip: 172.17.0.5
    qosClass: BestEffort
    startTime: "2025-01-02T13:20:17Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-02T13:20:31Z"
    labels:
      name: simple-webapp
    name: simple-webapp-1
    namespace: default
    resourceVersion: "613"
    uid: 32726a46-91bf-44b4-bfea-5b646e55ce6c
  spec:
    containers:
    - image: kodekloud/webapp-delayed-start
      imagePullPolicy: Always
      name: simple-webapp
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zltzs
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-zltzs
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:38Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://45ebc4240297c24970dd287eb081c31e610b84ac3ea088ab2b5cf2d1e1c4f460
      image: docker.io/kodekloud/webapp-delayed-start:latest
      imageID: docker.io/kodekloud/webapp-delayed-start@sha256:666b95c2ef8e00a74fa0ea96def8d9d69104ec5d9b9b0f49d8a76bd4c94ad343
      lastState: {}
      name: simple-webapp
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-02T13:20:38Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zltzs
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.122.157
    hostIPs:
    - ip: 192.168.122.157
    phase: Running
    podIP: 172.17.0.7
    podIPs:
    - ip: 172.17.0.7
    qosClass: BestEffort
    startTime: "2025-01-02T13:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-02T13:20:31Z"
    labels:
      name: simple-webapp
    name: simple-webapp-122
    namespace: default
    resourceVersion: "612"
    uid: 611da85b-c507-4700-8f4c-668267c4b2d1
  spec:
    containers:
    - image: kodekloud/webapp-delayed-start
      imagePullPolicy: Always
      name: simple-webapp
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hxggg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-hxggg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:38Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7cb119aa8d666017ac4bfaf52a8660639faee1da6788e6d3783e2de3e9b3af4a
      image: docker.io/kodekloud/webapp-delayed-start:latest
      imageID: docker.io/kodekloud/webapp-delayed-start@sha256:666b95c2ef8e00a74fa0ea96def8d9d69104ec5d9b9b0f49d8a76bd4c94ad343
      lastState: {}
      name: simple-webapp
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-02T13:20:38Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hxggg
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.122.157
    hostIPs:
    - ip: 192.168.122.157
    phase: Running
    podIP: 172.17.0.8
    podIPs:
    - ip: 172.17.0.8
    qosClass: BestEffort
    startTime: "2025-01-02T13:20:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-02T13:20:17Z"
    labels:
      name: test
    name: test
    namespace: default
    resourceVersion: "600"
    uid: f325f397-935b-4b9a-a9da-81a03850fd6e
  spec:
    containers:
    - env:
      - name: APP_NAME
        value: Test Application
      image: kodekloud/webapp-conntest:web
      imagePullPolicy: Always
      name: test
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sglxj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: test-host1
    nodeName: controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-sglxj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:35Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:20:17Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e75f2c8887d553443af046077dbe8ed11703f9b920fbbf0918df66330c833acd
      image: docker.io/kodekloud/webapp-conntest:web
      imageID: docker.io/kodekloud/webapp-conntest@sha256:9deb1325274bcdf0256629133c693ed9fb4899cff147c9169f905d7b273d0a99
      lastState: {}
      name: test
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-02T13:20:35Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sglxj
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.122.157
    hostIPs:
    - ip: 192.168.122.157
    phase: Running
    podIP: 172.17.0.6
    podIPs:
    - ip: 172.17.0.6
    qosClass: BestEffort
    startTime: "2025-01-02T13:20:17Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-02T13:23:16Z"
    generateName: webapp-f7ccb978f-
    labels:
      name: webapp
      pod-template-hash: f7ccb978f
    name: webapp-f7ccb978f-xq7xc
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: webapp-f7ccb978f
      uid: abfa4dc2-154d-439f-b8d1-e13727e4ed6b
    resourceVersion: "883"
    uid: bc1d0ccf-0346-4626-b08b-31dc86319635
  spec:
    containers:
    - env:
      - name: DB_Host
        value: mysql.payroll
      - name: DB_User
        value: root
      - name: DB_Password
        value: paswrd
      image: mmumshad/simple-webapp-mysql
      imagePullPolicy: Always
      name: simple-webapp-mysql
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vbb6s
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-vbb6s
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:23:18Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:23:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:23:18Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:23:18Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-02T13:23:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://d22105eb5b779a27193bb97a4c0fb5539c36ed2356f673c0288957f10aa1297e
      image: docker.io/mmumshad/simple-webapp-mysql:latest
      imageID: docker.io/mmumshad/simple-webapp-mysql@sha256:d4d0c03fcb76cee6ae2511fa7f3f6b7090f0c5e0cb3f276687f9ddf2c689cc09
      lastState: {}
      name: simple-webapp-mysql
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-02T13:23:18Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vbb6s
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.122.157
    hostIPs:
    - ip: 192.168.122.157
    phase: Running
    podIP: 172.17.0.11
    podIPs:
    - ip: 172.17.0.11
    qosClass: BestEffort
    startTime: "2025-01-02T13:23:16Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-01-02T13:19:02Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "193"
    uid: 3310e399-3ac9-4deb-aed0-2928c3718517
  spec:
    clusterIP: 172.20.0.1
    clusterIPs:
    - 172.20.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 6443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-01-02T13:20:17Z"
    name: test-service
    namespace: default
    resourceVersion: "537"
    uid: 688533af-ba1f-4d92-b8a0-26d529372388
  spec:
    clusterIP: 172.20.142.220
    clusterIPs:
    - 172.20.142.220
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - nodePort: 30080
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: test
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-01-02T13:20:17Z"
    name: web-service
    namespace: default
    resourceVersion: "528"
    uid: 266029ee-fc21-4667-9f30-ff89f45c7dbb
  spec:
    clusterIP: 172.20.124.68
    clusterIPs:
    - 172.20.124.68
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      name: hr
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-01-02T13:22:38Z"
    name: webapp-service
    namespace: default
    resourceVersion: "785"
    uid: 5b50785e-decd-497c-b495-8443bbba5a35
  spec:
    clusterIP: 172.20.55.154
    clusterIPs:
    - 172.20.55.154
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - nodePort: 30082
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: webapp
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2025-01-02T13:22:38Z"
    generation: 2
    labels:
      name: webapp
    name: webapp
    namespace: default
    resourceVersion: "897"
    uid: ee833b9c-ec9c-4cd4-86d1-440b5997a3d2
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: webapp
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: webapp
      spec:
        containers:
        - env:
          - name: DB_Host
            value: mysql.payroll
          - name: DB_User
            value: root
          - name: DB_Password
            value: paswrd
          image: mmumshad/simple-webapp-mysql
          imagePullPolicy: Always
          name: simple-webapp-mysql
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-02T13:22:43Z"
      lastUpdateTime: "2025-01-02T13:22:43Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-02T13:22:38Z"
      lastUpdateTime: "2025-01-02T13:23:18Z"
      message: ReplicaSet "webapp-f7ccb978f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-01-02T13:22:38Z"
    generation: 2
    labels:
      name: webapp
      pod-template-hash: 6c9b6dccfb
    name: webapp-6c9b6dccfb
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: webapp
      uid: ee833b9c-ec9c-4cd4-86d1-440b5997a3d2
    resourceVersion: "896"
    uid: 612bc00a-c12b-41ae-aaaf-8a2c71513032
  spec:
    replicas: 0
    selector:
      matchLabels:
        name: webapp
        pod-template-hash: 6c9b6dccfb
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: webapp
          pod-template-hash: 6c9b6dccfb
      spec:
        containers:
        - env:
          - name: DB_Host
            value: mysql
          - name: DB_User
            value: root
          - name: DB_Password
            value: paswrd
          image: mmumshad/simple-webapp-mysql
          imagePullPolicy: Always
          name: simple-webapp-mysql
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2025-01-02T13:23:16Z"
    generation: 1
    labels:
      name: webapp
      pod-template-hash: f7ccb978f
    name: webapp-f7ccb978f
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: webapp
      uid: ee833b9c-ec9c-4cd4-86d1-440b5997a3d2
    resourceVersion: "884"
    uid: abfa4dc2-154d-439f-b8d1-e13727e4ed6b
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: webapp
        pod-template-hash: f7ccb978f
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: webapp
          pod-template-hash: f7ccb978f
      spec:
        containers:
        - env:
          - name: DB_Host
            value: mysql.payroll
          - name: DB_User
            value: root
          - name: DB_Password
            value: paswrd
          image: mmumshad/simple-webapp-mysql
          imagePullPolicy: Always
          name: simple-webapp-mysql
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
kind: List
metadata:
  resourceVersion: ""